import java.util.*;
import org.junit.*;
import org.junit.runner.*;

/*

Given an array nums containing n + 1 integers where each integer is between
1 and n (inclusive), prove that at least one duplicate number must exist.
Assume that there is only one duplicate number, find the duplicate one.

Note:
You must not modify the array (assume the array is read only).
You must use only constant, O(1) extra space.
Your runtime complexity should be less than O(n2).
There is only one duplicate number in the array, but it could be repeated more than once.

*/

public class Solution {
  public static void main(String[] args) {
    JUnitCore.main("Solution");
  }

  public int findDuplicate(int[] nums) {
    int ptr1 = 0;
    int ptr2 = 0;
    while (true) {
      ptr1 = nums[ptr1];
      ptr2 = nums[nums[ptr2]];
      if (ptr1 == ptr2) break;
    }
    ptr2 = 0;
    while (true) {
      ptr1 = nums[ptr1];
      ptr2 = nums[ptr2];
      if (ptr1 == ptr2) return ptr1;
    }
  }

  @Test
  public void findDuplicate_ifNis2_thenReturnsCorrectAnswer() {
    int[] nums = new int[] { 2, 1, 1 };
    Assert.assertEquals(1, findDuplicate(nums));
  }

  @Test
  public void findDuplicate_ifNis3_thenReturnsCorrectAnswer() {
    int[] nums = new int[] { 3, 3, 3, 3 };
    Assert.assertEquals(3, findDuplicate(nums));
  }

  @Test
  public void findDuplicate_ifNis5_thenReturnsCorrectAnswer() {
    int[] nums = new int[] { 3, 3, 5, 4, 3, 2 };
    Assert.assertEquals(3, findDuplicate(nums));
  }

  @Test
  public void findDuplicate_ifNis10_thenReturnsCorrectAnswer() {
    int[] nums = new int[] { 3, 2, 1, 5, 6, 4, 10, 8, 7, 9, 3 };
    Assert.assertEquals(3, findDuplicate(nums));
  }
}
