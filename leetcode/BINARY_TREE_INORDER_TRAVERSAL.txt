import java.util.*;
import org.junit.*;
import org.junit.runner.*;

/*

Given a binary tree, return the inorder traversal of its nodes' values.

For example:
Given binary tree [1,null,2,3],
   1
    \
     2
    /
   3
return [1,3,2].

Note: Recursive solution is trivial, could you do it iteratively?

*/

public class Solution {
  public static void main(String[] args) {
    JUnitCore.main("Solution");
  }

  public List<Integer> inorderTraversal(TreeNode root) {
    List<Integer> list = new ArrayList<>();
    Stack<TreeNode> stack = new Stack<>();
    while (!stack.isEmpty() || root != null) {
      if (root != null) {
        stack.push(root);
        root = root.left;
      }
      else {
        root = stack.pop();
        list.add(root.val);
        root = root.right;
      }
    }
    return list;
  }

  @Test
  public void inorderTraversal_ifNull_thenReturnsEmptyList() {
    Assert.assertEquals(Arrays.asList(), inorderTraversal(null));
  }

  @Test
  public void inorderTraversal_ifOneNodeTree_thenReturnsOneElement() {
    Assert.assertEquals(Arrays.asList(0), inorderTraversal(new TreeNode(0)));
  }

  @Test
  public void inorderTraversal_ifBalancedTree_thenReturnsCorrectTraversal() {
    TreeNode root = new TreeNode(1);
    root.left = new TreeNode(2);
    root.right = new TreeNode(3);
    Assert.assertEquals(Arrays.asList(2, 1, 3), inorderTraversal(root));
  }

  @Test
  public void inorderTraversal_ifSkewedTree_thenReturnsCorrectTraversal() {
    TreeNode root = new TreeNode(1);
    root.left = new TreeNode(2);
    root.left.right = new TreeNode(3);
    root.left.right.left = new TreeNode(4);
    Assert.assertEquals(Arrays.asList(2, 4, 3, 1), inorderTraversal(root));
  }
}

class TreeNode {
   int val;
   TreeNode left;
   TreeNode right;
   TreeNode(int x) { val = x; }
}
