import java.util.*;
import org.junit.*;
import org.junit.runner.*;

/*

Given a non negative integer number num.
For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1's
in their binary representation and return them as an array.

Example:
For num = 5 you should return [0,1,1,2,1,2].

Follow up:

It is very easy to come up with a solution with run time O(n*sizeof(integer)).
But can you do it in linear time O(n) /possibly in a single pass?
Space complexity should be O(n).
Can you do it like a boss?
Do it without using any builtin function like __builtin_popcount in c++ or in any other language.

*/

public class Solution {
  public static void main(String[] args) {
    JUnitCore.main("Solution");
  }
  
  public int[] countBits(int num) {
    if (num < 0) return new int[0];
    int[] result = new int[num+1];
    for (int i = 1; i <= num; i++) {
      result[i] = countBit(i);
    }
    return result;
  }
  
  private int countBit(int num) {
    int count = 0;
    while (num > 0) {
      num &= num - 1;
      count++;
    }
    return count;
  }
  
  @Test
  public void countBits_ifNegative_thenReturnsEmptyArray() {
    Assert.assertEquals(0, countBits(-1).length);
  }
  
  @Test
  public void countBits_if0_thenReturns0() {
    Assert.assertEquals("[0]", Arrays.toString(countBits(0)));
  }
  
  @Test
  public void countBits_if5_thenReturns011212() {
    Assert.assertEquals("[0, 1, 1, 2, 1, 2]", Arrays.toString(countBits(5)));
  }
  
  @Test
  public void countBits_if10_thenReturns01121223122() {
    Assert.assertEquals("[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2]", Arrays.toString(countBits(10)));
  }
  
  @Test
  public void countBits_if15_thenReturns0112122312232334() {
    Assert.assertEquals("[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4]",
        Arrays.toString(countBits(15)));
  }
}