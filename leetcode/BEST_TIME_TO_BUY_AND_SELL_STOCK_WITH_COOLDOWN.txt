import org.junit.*;
import org.junit.runner.*;

/*

Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like
(i.e., buy one and sell one share of the stock multiple times) with the following restrictions:

You may not engage in multiple transactions at the same time
(i.e., you must sell the stock before you buy again).
After you sell your stock, you cannot buy stock on next day. (i.e., cooldown 1 day)

Example:
prices = [1, 2, 3, 0, 2]
maxProfit = 3
transactions = [buy, sell, cooldown, buy, sell]

*/

public class Solution {
  public static void main(String[] args) {
    JUnitCore.main("Solution");
  }

  /*
  [0, 1, 4, 0, 2, 4]
  maxProfit[0] = 0  // sell[day0] = 0								 [buy]
  maxProfit[1] = 1  // sell[day1] = (1 - 0) + 0 = 1  [buy, sell]
  maxProfit[2] = 4  // sell[day2] = (4 - 1) + 1 = 4  [buy, c/d, sell]
  maxProfit[3] = 4  // sell[day3] = (0 - 4) + 4 = 0  [buy, c/d, c/d, sell]
  maxProfit[4] = 4  // sell[day4] = (2 - 0) + Math.max(0, 1) = 3  [buy, sell, c/d, buy, sell]
  maxProfit[5] = 6  // sell[day5] = (4 - 2) + Math.max(3, 4) = 6  [buy, c/d, sell, c/d, buy, sell]

  (i.e. sell[i] indicates max profit in order to sell on day i,
   starting from day 4 if more than one sell produce max profit then
   must have a cooldown day after each previous sell, hence we check
   max profit 3 days ago vs. sell profit day i - 1)
  */
  public int maxProfit(int[] prices) {
    int n = prices.length;
    int[] sell = new int[n];
    int[] maxProfit = new int[n];
    for (int i = 1; i < prices.length; i++) {
      int diff = prices[i] - prices[i - 1];
      sell[i] = diff + Math.max(sell[i-1], (i > 3) ? maxProfit[i-3] : 0);
      maxProfit[i] = Math.max(sell[i], maxProfit[i-1]);
    }
    return (n > 0) ? maxProfit[n-1] : 0;
  }

  @Test
  public void maxProfit_ifEmptyArray_thenReturns0() {
    int[] prices = new int[0];
    Assert.assertEquals(0, maxProfit(prices));
  }

  @Test
  public void maxProfit_ifOneElementArray_thenReturns0() {
    int[] prices = new int[] { 1 };
    Assert.assertEquals(0, maxProfit(prices));
  }

  @Test
  public void maxProfit_ifDescendingPrices_thenReturns0() {
    int[] prices = new int[] { 7, 6, 4, 3, 1 };
    Assert.assertEquals(0, maxProfit(prices));
  }

  @Test
  public void maxProfit_ifAscendingPrices_thenReturnsCorrectAnswer() {
    int[] prices = new int[] { 1, 3, 4, 6, 7 };
    Assert.assertEquals(6, maxProfit(prices));
  }

  @Test
  public void maxProfit_ifUpThenDownPrices_thenReturnsCorrectAnswer() {
    int[] prices = new int[] { 1, 2, 3, 1, 0 };
    Assert.assertEquals(2, maxProfit(prices));
  }

  @Test
  public void maxProfit_ifOneCooldownPrice_thenReturnsCorrectAnswer() {
    int[] prices = new int[] { 1, 2, 3, 0, 2 };
    Assert.assertEquals(3, maxProfit(prices));
  }

  @Test
  public void maxProfit_ifTwoCooldownPrices_thenReturnsCorrectAnswer() {
    int[] prices = new int[] { 1, 5, 4, 2, 1, 6 };
    Assert.assertEquals(9, maxProfit(prices));
  }

  @Test
  public void maxProfit_ifSkipCooldownPrices_thenReturnsCorrectAnswer() {
    int[] prices = new int[] { 7, 1, 5, 3, 6, 6 };
    Assert.assertEquals(5, maxProfit(prices));
  }
}
