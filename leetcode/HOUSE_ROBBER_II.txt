import org.junit.*;
import org.junit.runner.*;

/*

Note: This is an extension of House Robber.

After robbing those houses on that street, the thief has found himself a new place
for his thievery so that he will not get too much attention. This time, all houses
at this place are arranged in a circle. That means the first house is the neighbor
of the last one. Meanwhile, the security system for these houses remain the same
as for those in the previous street.

Given a list of non-negative integers representing the amount of money of each house,
determine the maximum amount of money you can rob tonight without alerting the police.

*/

public class Solution {
  public static void main(String[] args) {
    JUnitCore.main("Solution");
  }

  /*
  [10, 1, 1, 10, 11]
  [10, 1, 1, 10] or [1, 1, 10, 11] => 20 or 12 => 20
  */
  public int rob(int[] nums) {
    if (nums == null || nums.length == 0) return 0;
    if (nums.length == 1) return nums[0];
    return Math.max(rob(nums, 0, nums.length - 2), rob(nums, 1, nums.length - 1));
  }

  private int rob(int[] nums, int left, int right) {
    int evenMax = 0;
    int oddMax = 0;
    for (int i = left; i <= right; i++) {
      if (i % 2 == 0) evenMax = Math.max(oddMax, evenMax + nums[i]);
      else oddMax = Math.max(evenMax, oddMax + nums[i]);
    }
    return Math.max(evenMax, oddMax);
  }

  @Test
  public void rob_ifNull_thenReturns0() {
    Assert.assertEquals(0, rob(null));
  }

  @Test
  public void rob_ifEmptyArray_thenReturns0() {
    int[] money = new int[0];
    Assert.assertEquals(0, rob(money));
  }

  @Test
  public void rob_ifOneElementArray_thenReturnsCorrectAnswer() {
    int[] money = new int[] { 1 };
    Assert.assertEquals(1, rob(money));
  }

  @Test
  public void rob_ifTwoElementsArray_thenReturnsCorrectAnswer() {
    int[] money = new int[] { 1, 2 };
    Assert.assertEquals(2, rob(money));
  }

  @Test
  public void rob_ifMaxOnStartAndEnd_thenReturnsCorrectAnswer() {
    int[] money = new int[] { 1, 2, 3 };
    Assert.assertEquals(3, rob(money));
  }

  @Test
  public void rob_ifSkipTwo_thenReturnsCorrectAnswer() {
    int[] money = new int[] { 10, 1, 1, 10, 11 };
    Assert.assertEquals(20, rob(money));
  }

  @Test
  public void rob_ifRandomNumbers_thenReturnsCorrectAnswer() {
    int[] money = new int[] { 1, 7, 10, 8, 3 };
    Assert.assertEquals(15, rob(money));
  }
}
