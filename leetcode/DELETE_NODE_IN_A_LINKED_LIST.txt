import org.junit.*;
import org.junit.runner.*;

/*

Write a function to delete a node (except the tail) in a singly
linked list, given only access to that node.

Supposed the linked list is 1 -> 2 -> 3 -> 4 and you are given
the third node with value 3, the linked list should become
1 -> 2 -> 4 after calling your function.

*/

public class Solution {
  public static void main(String[] args) {
    JUnitCore.main("Solution");
  }

  public void deleteNode(ListNode node) {
    if (node == null || node.next == null) return;
    ListNode nextNode = node.next;
    node.val = nextNode.val;
    node.next = nextNode.next;
  }

  @Test
  public void deleteNode_ifDeleteMiddleNode_thenNodeDeleted() {
    ListNode head = new ListNode(1);
    head.next = new ListNode(2);
    ListNode node = new ListNode(3);
    head.next.next = node;
    node.next = new ListNode(4);
    deleteNode(node);
    Assert.assertEquals(1, head.val);
    Assert.assertEquals(2, head.next.val);
    Assert.assertEquals(4, head.next.next.val);
    Assert.assertNull(head.next.next.next);
  }

  @Test
  public void deleteNode_ifDeleteTailNode_thenNotDeleted() {
    ListNode head = new ListNode(1);
    head.next = new ListNode(2);
    ListNode node = new ListNode(3);
    head.next.next = node;
    deleteNode(node);
    Assert.assertEquals(1, head.val);
    Assert.assertEquals(2, head.next.val);
    Assert.assertEquals(3, head.next.next.val);
    Assert.assertNull(head.next.next.next);
  }

  @Test
  public void deleteNode_ifDeleteHeadNode_thenNodeDeleted() {
    ListNode head = new ListNode(1);
    ListNode node = new ListNode(2);
    head.next = node;
    deleteNode(head);
    Assert.assertEquals(2, head.val);
    Assert.assertNull(head.next);
  }
}

class ListNode {
  int val;
  ListNode next;
  ListNode(int x) { val = x; }
}
