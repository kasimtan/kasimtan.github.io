import java.util.*;
import org.junit.*;
import org.junit.runner.*;

/*

Given two arrays, write a function to compute their intersection.

Example:
Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2].

Note:
Each element in the result must be unique.
The result can be in any order.

*/

public class Solution {
  public static void main(String[] args) {
    JUnitCore.main("Solution");
  }
  
  public int[] intersection(int[] nums1, int[] nums2) {
    Set<Integer> set = storeSet(nums1);
    Set<Integer> intersectSet = checkSet(set, nums2);
    return setToArray(intersectSet);
  }
  
  private Set<Integer> storeSet(int[] nums) {
    Set<Integer> set = new HashSet<Integer>();
    for (int num : nums) {
      set.add(num);
    }
    return set;
  }
  
  private Set<Integer> checkSet(Set<Integer> set, int[] nums) {
    Set<Integer> intersectSet = new HashSet<Integer>();
    for (int num : nums) {
      if (set.contains(num)) {
        intersectSet.add(num);
      }
    }
    return intersectSet;
  }
  
  private int[] setToArray(Set<Integer> set) {
    int arrayLen = (set == null) ? 0 : set.size();
    int[] result = new int[arrayLen];
    int i = 0;
    for (int num : set) {
      result[i] = num;
      i++;
    }
    return result;
  }
  
  @Test
  public void intersection_ifEmptyArray_thenReturnsEmptyArray() {
    int[] nums1 = new int[0];
    int[] nums2 = new int[0];
    int[] result = intersection(nums1, nums2);
    Assert.assertEquals("[]", Arrays.toString(result));
  }
  
  @Test
  public void intersection_ifNotIntersect_thenReturnsEmptyArray() {
    int[] nums1 = new int[] { 1, 3, 5 };
    int[] nums2 = new int[] { 2, 4, 6 };
    int[] result = intersection(nums1, nums2);
    Assert.assertEquals("[]", Arrays.toString(result));
  }
  
  @Test
  public void intersection_ifIntersect_thenReturnsUniqueIntersectArray() {
    int[] nums1 = new int[] { 1, 2, 2, 1 };
    int[] nums2 = new int[] { 2, 2 };
    int[] result = intersection(nums1, nums2);
    Assert.assertEquals("[2]", Arrays.toString(result));
  }
}