import java.util.*;
import org.junit.*;
import org.junit.runner.*;

/*

Given an array nums, write a function to move all 0's to the end of it
while maintaining the relative order of the non-zero elements.

For example, given nums = [0, 1, 0, 3, 12], after calling your function,
nums should be [1, 3, 12, 0, 0].

Note:
You must do this in-place without making a copy of the array.
Minimize the total number of operations.

*/

public class Solution {
  public static void main(String[] args) {
    JUnitCore.main("Solution");
  }

  public void moveZeroes(int[] nums) {
    for (int zeroPos = 0, currPos = 0; currPos < nums.length; currPos++) {
      if (nums[currPos] != 0) {
        swap(nums, currPos, zeroPos);
        zeroPos += 1;
      }
    }
  }

  private void swap(int[] nums, int from, int to) {
    int temp = nums[from];
    nums[from] = nums[to];
    nums[to] = temp;
  }

  @Test
  public void moveZeroes_ifEmptyArray_thenReturnsEmptyArray() {
    int[] nums = new int[0];
    moveZeroes(nums);
    Assert.assertEquals("[]", Arrays.toString(nums));
  }

  @Test
  public void moveZeroes_ifOneElementArray_thenReturnsSameAsInput() {
    int[] nums = new int[] { 1 };
    moveZeroes(nums);
    Assert.assertEquals("[1]", Arrays.toString(nums));
  }

  @Test
  public void moveZeroes_ifRandomElementsArray_thenReturnsCorrectAnswer() {
    int[] nums = new int[] { 0, 0, 1, -10, 5, 0 };
    moveZeroes(nums);
    Assert.assertEquals("[1, -10, 5, 0, 0, 0]", Arrays.toString(nums));
  }
}
