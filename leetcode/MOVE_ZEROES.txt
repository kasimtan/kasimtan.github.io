import java.util.*;
import org.junit.*;
import org.junit.runner.*;

/*

Given an array nums, write a function to move all 0's to the end of it
while maintaining the relative order of the non-zero elements.

For example, given nums = [0, 1, 0, 3, 12], after calling your function,
nums should be [1, 3, 12, 0, 0].

Note:
You must do this in-place without making a copy of the array.
Minimize the total number of operations.

*/

public class Solution {
  public static void main(String[] args) {
    JUnitCore.main("Solution");
  }
  
  public int[] moveZeroes(int[] nums) {
    Queue<Integer> queue = new ArrayDeque<Integer>();
    for (int i = 0; i < nums.length; i++) {
      if (nums[i] == 0) {
        queue.add(i);
      }
      else if (!queue.isEmpty()) {
        int swapIndex = queue.remove();
        swapArray(nums, i, swapIndex);
        queue.add(i);
      }
    }
    return nums;
  }
  
  private void swapArray(int[] nums, int from, int to) {
    int temp = nums[from];
    nums[from] = nums[to];
    nums[to] = temp;
  }
  
  @Test
  public void moveZeroes_ifEmptyArray_thenReturnsEmptyArray() {
    int[] result = moveZeroes(new int[0]);
    Assert.assertEquals("[]", Arrays.toString(result));
  }
  
  @Test
  public void moveZeroes_ifOneElementArray_thenReturnsSameAsInput() {
    int[] input = new int[] { 0 };
    int[] result = moveZeroes(input);
    Assert.assertEquals(Arrays.toString(input), Arrays.toString(result));
  }
  
  @Test
  public void moveZeroes_ifMoreThanOneElementArray_thenReturnsMovedZeroesArray() {
    int[] input = new int[] { 0, 0, 1, -10, 5, 0 };
    int[] result = moveZeroes(input);
    Assert.assertEquals("[1, -10, 5, 0, 0, 0]", Arrays.toString(result));
  }
}