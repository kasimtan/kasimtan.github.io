import org.junit.*;
import org.junit.runner.*;

/*

Implement a trie with insert, search, and startsWith methods.

Note:
You may assume that all inputs are consist of lowercase letters a-z.

Your Trie object will be instantiated and called as such:
Trie trie = new Trie();
trie.insert("somestring");
trie.search("key");

*/

public class Solution {
  public static void main(String[] args) {
    JUnitCore.main("Solution");
  }

  @Test
  public void search_ifNotFound_thenReturnsFalse() {
    Trie trie = new Trie();
    trie.insert("somestring");
    Assert.assertFalse(trie.search("key"));
  }

  @Test
  public void search_ifFound_thenReturnsTrue() {
    Trie trie = new Trie();
    trie.insert("somestring");
    Assert.assertTrue(trie.search("somestring"));
  }

  @Test
  public void startsWith_ifNotFound_thenReturnsFalse() {
    Trie trie = new Trie();
    trie.insert("somestring");
    Assert.assertFalse(trie.startsWith("key"));
  }

  @Test
  public void startsWith_ifFound_thenReturnsTrue() {
    Trie trie = new Trie();
    trie.insert("somestring");
    Assert.assertTrue(trie.startsWith("some"));
  }
}

class TrieNode {
  TrieNode[] next = new TrieNode[26];
  boolean isLeaf;
  public TrieNode() { }
}

class Trie {
  private TrieNode root;

  public Trie() {
    root = new TrieNode();
  }

  public void insert(String word) {
    TrieNode node = root;
    for (char c : word.toCharArray()) {
      if (node.next[c - 'a'] == null) {
        node.next[c - 'a'] = new TrieNode();
      }
      node = node.next[c - 'a'];
    }
    node.isLeaf = true;
  }

  public boolean search(String word) {
    TrieNode node = searchPrefix(word);
    return (node != null && node.isLeaf);
  }

  public boolean startsWith(String prefix) {
    TrieNode node = searchPrefix(prefix);
    return (node != null);
  }

  private TrieNode searchPrefix(String word) {
    TrieNode node = root;
    for (char c : word.toCharArray()) {
      if (node.next[c - 'a'] == null) return null;
      node = node.next[c - 'a'];
    }
    return node;
  }
}
