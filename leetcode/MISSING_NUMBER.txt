import org.junit.*;
import org.junit.runner.*;

/*

Given an array containing n distinct numbers taken from 0, 1, 2, ..., n,
find the one that is missing from the array.

For example,
Given nums = [0, 1, 3] return 2.

Note:
Your algorithm should run in linear runtime complexity.
Could you implement it using only constant extra space complexity?

*/

public class Solution {
  public static void main(String[] args) {
    JUnitCore.main("Solution");
  }

  public int missingNumber(int[] nums) {
    int i = 0;
    int xor = 0;
    for (; i < nums.length; i++) {
      xor = xor ^ nums[i] ^ i;
    }
    return xor ^ i;
  }

  @Test
  public void missingNumber_ifEmptyArray_thenReturns0() {
    int[] nums = new int[0];
    Assert.assertEquals(0, missingNumber(nums));
  }

  @Test
  public void missingNumber_ifOneElementArray_thenReturnsCorrectAnswer() {
    int[] nums = new int[] { 1 };
    Assert.assertEquals(0, missingNumber(nums));
  }

  @Test
  public void missingNumber_ifTwoElementsArray_thenReturnsCorrectAnswer() {
    int[] nums = new int[] { 0, 1 };
    Assert.assertEquals(2, missingNumber(nums));
  }

  @Test
  public void missingNumber_ifThreeElementsArray_thenReturnsCorrectAnswer() {
    int[] nums = new int[] { 0, 1, 3 };
    Assert.assertEquals(2, missingNumber(nums));
  }
}
