import java.util.*;
import org.junit.*;
import org.junit.runner.*;

/*

Given two strings s and t, write a function to determine if t is an anagram of s.

For example,
s = "anagram", t = "nagaram", return true.
s = "rat", t = "car", return false.

Note:
You may assume the string contains only lowercase alphabets.

Follow up:
What if the inputs contain unicode characters?
How would you adapt your solution to such case?

*/

public class Solution {
  public static void main(String[] args) {
    JUnitCore.main("Solution");
  }

  public boolean isAnagram(String s, String t) {
    if (s == null || t == null || s.length() != t.length()) return false;
    int[] counts = new int[26];
    for (char c : s.toCharArray()) counts[c - 'a'] += 1;
    for (char c : t.toCharArray()) counts[c - 'a'] -= 1;
    for (int count : counts) if (count != 0) return false;
    return true;
  }

  @Test
  public void isAnagram_ifNullString_thenReturnsFalse() {
    Assert.assertFalse(isAnagram(null, null));
  }

  @Test
  public void isAnagram_ifBothEmptyStrings_thenReturnsTrue() {
    Assert.assertTrue(isAnagram("", ""));
  }

  @Test
  public void isAnagram_ifDifferentLengthStrings_thenReturnsFalse() {
    Assert.assertFalse(isAnagram("aa", "aaa"));
  }

  @Test
  public void isAnagram_ifNotAnagramStrings_thenReturnsFalse() {
    Assert.assertFalse(isAnagram("rat", "car"));
  }

  @Test
  public void isAnagram_ifAnagramStrings_thenReturnsTrue() {
    Assert.assertTrue(isAnagram("anagram", "nagaram"));
  }
}
