import org.junit.*;
import org.junit.runner.*;

/*

Given a non-negative integer num, repeatedly add all its digits until
the result has only one digit.

For example:

Given num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2.
Since 2 has only one digit, return it.

Follow up:
Could you do it without any loop/recursion in O(1) runtime?

Hint:
https://en.wikipedia.org/wiki/Digital_root

*/

public class Solution {
  public static void main(String[] args) {
    JUnitCore.main("Solution");
  }
  
  public int addDigits(int num) {
    if (num < 10) return num;
    else if (num % 9 == 0) return 9;
    else return num % 9;
  }
  
  @Test
  public void addDigits_ifOneDigit_thenReturnsSameAsInput() {
    Assert.assertEquals(0, addDigits(0));
    Assert.assertEquals(9, addDigits(9));
  }
  
  @Test
  public void addDigits_ifTwoDigits_thenReturnsCorrectAnswer() {
    Assert.assertEquals(1, addDigits(10));
    Assert.assertEquals(9, addDigits(99));
  }
  
  @Test
  public void addDigits_ifThreeDigits_thenReturnsCorrectAnswer() {
    Assert.assertEquals(6, addDigits(123));
    Assert.assertEquals(8, addDigits(998));
  }
}