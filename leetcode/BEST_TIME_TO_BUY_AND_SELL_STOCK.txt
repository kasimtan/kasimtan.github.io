import org.junit.*;
import org.junit.runner.*;

/*

Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (i.e., buy one and
sell one share of the stock), design an algorithm to find the maximum profit.

Example 1:
Input: [7, 1, 5, 3, 6, 4]
Output: 5
max. difference = 6 - 1 = 5
(not 7 - 1 = 6, as selling price needs to be larger than buying price)

Example 2:
Input: [7, 6, 4, 3, 1]
Output: 0
In this case, no transaction is done, i.e. max profit = 0.

*/

public class Solution {
  public static void main(String[] args) {
    JUnitCore.main("Solution");
  }

  public int maxProfit(int[] prices) {
    int maxProfit = 0;
    int minPrice = Integer.MAX_VALUE;
    for (int price : prices) {
      if (price < minPrice) minPrice = price;
      maxProfit = Math.max(maxProfit, price - minPrice);
    }
    return maxProfit;
  }

  @Test
  public void maxProfit_ifEmptyArray_thenReturns0() {
    int[] prices = new int[0];
    Assert.assertEquals(0, maxProfit(prices));
  }

  @Test
  public void maxProfit_ifOneElementArray_thenReturns0() {
    int[] prices = new int[] { 1 };
    Assert.assertEquals(0, maxProfit(prices));
  }

  @Test
  public void maxProfit_ifDescendingPrices_thenReturns0() {
    int[] prices = new int[] { 7, 6, 4, 3, 1 };
    Assert.assertEquals(0, maxProfit(prices));
  }

  @Test
  public void maxProfit_ifAscendingPrices_thenReturnsCorrectAnswer() {
    int[] prices = new int[] { 1, 3, 4, 6, 7 };
    Assert.assertEquals(6, maxProfit(prices));
  }

  @Test
  public void maxProfit_ifMinPriceOnSecondDay_thenReturnsCorrectAnswer() {
    int[] prices = new int[] { 7, 1, 5, 3, 6, 4 };
    Assert.assertEquals(5, maxProfit(prices));
  }

  @Test
  public void maxProfit_ifMinPriceOnLastDay_thenReturnsCorrectAnswer() {
    int[] prices = new int[] { 7, 2, 5, 3, 6, 1 };
    Assert.assertEquals(4, maxProfit(prices));
  }
}
