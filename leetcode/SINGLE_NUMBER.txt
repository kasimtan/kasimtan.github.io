import org.junit.*;
import org.junit.runner.*;

/*

Given an array of integers, every element appears twice except for one.
Find that single one.

Note:
Your algorithm should have a linear runtime complexity.
Could you implement it without using extra memory?

*/

public class Solution {
  public static void main(String[] args) {
    JUnitCore.main("Solution");
  }
  
  public int singleNumber(int[] nums) {
    int single = 0;
    for (int num : nums) {
      single ^= num;
    }
    return single;
  }
  
  @Test
  public void singleNumber_ifEmptyArray_thenReturnsZero() {
    Assert.assertEquals(0, singleNumber(new int[0]));
  }
  
  @Test
  public void singleNumber_ifOneElementArray_thenReturnsCorrectAnswer() {
    Assert.assertEquals(1, singleNumber(new int[] { 1 }));
  }
  
  @Test
  public void singleNumber_ifThreeElementsArray_thenReturnsCorrectAnswer() {
    Assert.assertEquals(2, singleNumber(new int[] { 2, 0, 0 }));
  }
  
  @Test
  public void singleNumber_ifNegativeValues_thenReturnsCorrectAnswer() {
    Assert.assertEquals(-2, singleNumber(new int[] { -1, -2, -1, -3, -3 }));
  }
  
  @Test
  public void singleNumber_ifMixedValues_thenReturnsCorrectAnswer() {
    Assert.assertEquals(-2, singleNumber(new int[] { Integer.MAX_VALUE, -2,
        Integer.MIN_VALUE, 2, Integer.MIN_VALUE, Integer.MAX_VALUE, 2 }));
  }
}