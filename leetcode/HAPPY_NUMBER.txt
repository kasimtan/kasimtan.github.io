import org.junit.*;
import org.junit.runner.*;

/*

Write an algorithm to determine if a number is "happy".

A happy number is a number defined by the following process:
Starting with any positive integer, replace the number by
the sum of the squares of its digits, and repeat the process
until the number equals 1 (where it will stay), or it loops
endlessly in a cycle which does not include 1. Those numbers
for which this process ends in 1 are happy numbers.

Example: 19 is a happy number

1^2 + 9^2 = 82
8^2 + 2^2 = 68
6^2 + 8^2 = 100
1^2 + 0^2 + 0^2 = 1

*/

public class Solution {
  public static void main(String[] args) {
    JUnitCore.main("Solution");
  }

  /*
  1 = 1
  7 = 49 = 97 = 130 = 10 = 1
  2 = 4 = 16 = 37 = 58 ... see 5
  3 = 9 = 81 = 65 = 61 = 37 ... see 5
  5 = 25 = 29 = 85 = 89 = 145 = 42 = 20 ... cycle
  6 = 36 = 45 = 41 = 17 = 50 ... see 5
  8 = 64 = 52 = 29 ... see 5
  */
  public boolean isHappy(int n) {
    if (n <= 0) return false;
    do {
      int sum = 0;
      String s = String.valueOf(n);
      for (char c : s.toCharArray()) {
        int digit = Integer.parseInt(String.valueOf(c));
        sum += digit * digit;
      }
      if (sum == 1 || sum == 7) return true;
      n = sum;
    } while (n >= 10);
    return false;
  }

  @Test
  public void isHappy_ifNegativeNumber_thenReturnsFalse() {
    Assert.assertFalse(isHappy(-1));
  }

  @Test
  public void isHappy_ifMaximumInteger_thenReturnsFalse() {
    Assert.assertFalse(isHappy(Integer.MAX_VALUE));
  }

  @Test
  public void isHappy_if13_thenReturnsTrue() {
    Assert.assertTrue(isHappy(13));
  }

  @Test
  public void isHappy_if88_thenReturnsFalse() {
    Assert.assertFalse(isHappy(88));
  }
}
