import org.junit.*;
import org.junit.runner.*;

/*

The thief has found himself a new place for his thievery again.
There is only one entrance to this area, called the "root".
Besides the root, each house has one and only one parent house.
After a tour, the smart thief realized that "all houses in this
place forms a binary tree". It will automatically contact the police
if two directly-linked houses were broken into on the same night.

Determine the maximum amount of money the thief can rob tonight
without alerting the police.

Example 1:
     3
    / \
   2   3
    \   \
     3   1
Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.

Example 2:
     3
    / \
   4   5
  / \   \
 1   3   1
Maximum amount of money the thief can rob = 4 + 5 = 9.

*/

public class Solution {
  public static void main(String[] args) {
    JUnitCore.main("Solution");
  }

  public int rob(TreeNode root) {
    int[] max = robSubTree(root);
    return Math.max(max[0], max[1]);
  }

  private int[] robSubTree(TreeNode root) {
    if (root == null) return new int[2];
    int[] left = robSubTree(root.left);
    int[] right = robSubTree(root.right);
    int[] max = new int[2];
    max[0] = Math.max(left[0], left[1]) + Math.max(right[0], right[1]); // ignore root
    max[1] = root.val + left[0] + right[0]; // rob root
    return max;
  }

  @Test
  public void rob_ifNull_thenReturns0() {
    Assert.assertEquals(0, rob(null));
  }

  @Test
  public void rob_ifOneNode_thenReturnsCorrectAnswer() {
    TreeNode root = new TreeNode(1);
    Assert.assertEquals(1, rob(root));
  }

  @Test
  public void rob_ifSkewedThreeLevels_thenReturnsCorrectAnswer() {
    TreeNode root = new TreeNode(2);
    root.left = new TreeNode(3);
    root.left.right = new TreeNode(1);
    Assert.assertEquals(3, rob(root));
  }

  @Test
  public void rob_ifSkewedFourLevels_thenReturnsCorrectAnswer() {
    TreeNode root = new TreeNode(4);
    root.left = new TreeNode(1);
    root.left.left = new TreeNode(2);
    root.left.left.left = new TreeNode(3);
    Assert.assertEquals(7, rob(root));
  }

  @Test
  public void rob_ifAnswerIncludeRoot_thenReturnsCorrectAnswer() {
    TreeNode root = new TreeNode(3);
    root.left = new TreeNode(2);
    root.right = new TreeNode(3);
    root.left.right = new TreeNode(3);
    root.right.right = new TreeNode(1);
    Assert.assertEquals(7, rob(root));
  }

  @Test
  public void rob_ifAnswerExcludeRoot_thenReturnsCorrectAnswer() {
    TreeNode root = new TreeNode(3);
    root.left = new TreeNode(4);
    root.right = new TreeNode(5);
    root.left.left = new TreeNode(1);
    root.left.right = new TreeNode(3);
    root.right.right = new TreeNode(1);
    Assert.assertEquals(9, rob(root));
  }
}

class TreeNode {
  int val;
  TreeNode left;
  TreeNode right;
  TreeNode(int x) { val = x; }
}
