import org.junit.*;
import org.junit.runner.*;

/*

Given a singly linked list, group all odd nodes together followed by the even nodes.
Please note here we are talking about the node number and not the value in the nodes.

You should try to do it in place.
The program should run in O(1) space complexity and O(nodes) time complexity.

Example:
Given 1->2->3->4->5->NULL,
return 1->3->5->2->4->NULL.

Note:
The relative order inside both the even and odd groups should remain as it was in the input.
The first node is considered odd, the second node even and so on ...

*/

public class Solution {
  public static void main(String[] args) {
    JUnitCore.main("Solution");
  }

  public ListNode oddEvenList(ListNode head) {
    if (head != null) {
      ListNode odd = head;
      ListNode even = head.next;
      ListNode evenHead = even;
      while (even != null && even.next != null) {
        odd.next = odd.next.next;
        even.next = even.next.next;
        odd = odd.next;
        even = even.next;
      }
      odd.next = evenHead;
    }
    return head;
  }

  @Test
  public void oddEvenList_ifNull_thenReturnsNull() {
    Assert.assertNull(oddEvenList(null));
  }

  @Test
  public void oddEvenList_ifOneNode_thenReturnsOneNode() {
    ListNode head = new ListNode(0);
    ListNode list = oddEvenList(head);
    Assert.assertEquals("0", list.toString());
  }

  @Test
  public void oddEvenList_ifTwoNodes_thenReturnsGroupedList() {
    ListNode head = new ListNode(0);
    ListNode tail = new ListNode(1);
    head.next = tail;
    ListNode list = oddEvenList(head);
    Assert.assertEquals("0,1", list.toString());
  }

  @Test
  public void oddEvenList_ifFiveNodes_thenReturnsGroupedList() {
    ListNode head = new ListNode(0);
    ListNode second = new ListNode(1);
    ListNode third = new ListNode(2);
    ListNode fourth = new ListNode(3);
    ListNode tail = new ListNode(4);
    head.next = second;
    second.next = third;
    third.next = fourth;
    fourth.next = tail;
    ListNode list = oddEvenList(head);
    Assert.assertEquals("0,2,4,1,3", list.toString());
  }
}

class ListNode {
  int val;
  ListNode next;
  ListNode(int x) { val = x; }
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(val);
    while (next != null) {
      sb.append(",").append(next.val);
      next = next.next;
    }
    return sb.toString();
  }
}
