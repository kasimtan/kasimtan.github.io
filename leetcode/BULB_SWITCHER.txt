import org.junit.*;
import org.junit.runner.*;

/*

There are n bulbs that are initially off. You first turn on all the bulbs.
Then, you turn off every second bulb. On the third round, you toggle every
third bulb (turning on if it's off or turning off if it's on).
For the ith round, you toggle every i bulb. For the nth round, you only
toggle the last bulb. Find how many bulbs are on after n rounds.

Example:

Given n = 3.

At first, the three bulbs are [off, off, off].
After first round, the three bulbs are [on, on, on].
After second round, the three bulbs are [on, off, on].
After third round, the three bulbs are [on, off, off].

So you should return 1, because there is only one bulb is on.

*/

public class Solution {
  public static void main(String[] args) {
    JUnitCore.main("Solution");
  }

  /*
  n = 1  [on]
  n = 2  [on,off]
  n = 4  [on,off,off,on]
  n = 8  [on,off,off,on,off,off,off,off]
  n = 12 [on,off,off,on,off,off,off,off,on,off,off,off]
  n = 16 [on,off,off,on,off,off,off,off,on,off,off,off,off,off,off,on]
  */
  public int bulbSwitch(int n) {
    return (int)Math.sqrt(n);
  }

  @Test
  public void bulbSwitch_if0_thenReturns0() {
    Assert.assertEquals(0, bulbSwitch(0));
  }

  @Test
  public void bulbSwitch_if1_thenReturns1() {
    Assert.assertEquals(1, bulbSwitch(1));
  }

  @Test
  public void bulbSwitch_if3_thenReturns1() {
    Assert.assertEquals(1, bulbSwitch(3));
  }

  @Test
  public void bulbSwitch_if5_thenReturns2() {
    Assert.assertEquals(2, bulbSwitch(5));
  }

  @Test
  public void bulbSwitch_if10_thenReturns3() {
    Assert.assertEquals(3, bulbSwitch(10));
  }
}
