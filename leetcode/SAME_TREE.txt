import org.junit.*;
import org.junit.runner.*;

/*

Given two binary trees, write a function to check if they are equal or not.

Two binary trees are considered equal if they are structurally identical
and the nodes have the same value.

*/

public class Solution {
  public static void main(String[] args) {
    JUnitCore.main("Solution");
  }

  public boolean isSameTree(TreeNode p, TreeNode q) {
  	if (p != null && q != null) {
	    return (p.val == q.val)
	    		&& isSameTree(p.left, q.left)
	    		&& isSameTree(p.right, q.right);
  	}
  	return (p == q);
  }

  @Test
  public void isSameTree_ifBothNull_thenReturnsTrue() {
    Assert.assertTrue(isSameTree(null, null));
  }

  @Test
  public void isSameTree_ifOneNull_thenReturnsFalse() {
    TreeNode root = new TreeNode(0);
    Assert.assertFalse(isSameTree(null, root));
    Assert.assertFalse(isSameTree(root, null));
  }

  @Test
  public void isSameTree_ifSameTree_thenReturnsTrue() {
    TreeNode p = new TreeNode(0);
    TreeNode q = new TreeNode(0);
    p.left = new TreeNode(1);
    q.left = new TreeNode(1);
    p.right = new TreeNode(2);
    q.right = new TreeNode(2);
    Assert.assertTrue(isSameTree(p, q));
  }

  @Test
  public void isSameTree_ifMirroredTree_thenReturnsFalse() {
    TreeNode p = new TreeNode(0);
    TreeNode q = new TreeNode(0);
    p.left = new TreeNode(1);
    q.right = new TreeNode(1);
    Assert.assertFalse(isSameTree(p, q));
  }
}

class TreeNode {
  int val;
  TreeNode left;
  TreeNode right;
  TreeNode(int x) { val = x; }
}
