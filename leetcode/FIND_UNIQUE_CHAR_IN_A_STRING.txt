import java.util.*;
import org.junit.*;
import org.junit.runner.*;

/*

Given a string, find the first non-repeating character in it and return it's index.
If it doesn't exist, return -1.

Examples:

s = "leetcode"
return 0.

s = "loveleetcode",
return 2.

Note: You may assume the string contain only lowercase letters.

*/

public class Solution {
  public static void main(String[] args) {
    JUnitCore.main("Solution");
  }

  public int firstUniqChar(String s) {
    if (s == null) return -1;
    char[] chars = s.toCharArray();
    int[] bucket = new int[26];
    for (char c : chars) {
      bucket[c - 'a'] += 1;
    }
    for (int i = 0; i < chars.length; i++) {
      if (bucket[chars[i] - 'a'] == 1) return i;
    }
    return -1;
  }

  @Test
  public void firstUniqChar_ifNullInput_thenReturnsNegative1() {
    Assert.assertEquals(-1, firstUniqChar(null));
  }

  @Test
  public void firstUniqChar_ifEmptyString_thenReturnsNegative1() {
    Assert.assertEquals(-1, firstUniqChar(""));
  }

  @Test
  public void firstUniqChar_ifNoUniqueChar_thenReturnsNegative1() {
    Assert.assertEquals(-1, firstUniqChar("abcccba"));
  }

  @Test
  public void firstUniqChar_ifAllUnique_thenReturns0() {
    Assert.assertEquals(0, firstUniqChar("abc"));
  }

  @Test
  public void firstUniqChar_ifSomeUnique_thenReturnsFirstUniqueCharIndex() {
    Assert.assertEquals(0, firstUniqChar("leetcode"));
  }

  @Test
  public void firstUniqChar_ifUniqueCharInMiddleString_thenReturnsCorrectIndex() {
    Assert.assertEquals(2, firstUniqChar("loveleetcode"));
  }
}
